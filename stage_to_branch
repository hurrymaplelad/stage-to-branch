#!/bin/bash

# Stage Branch: build the npm package from the current branch 
#                and stage it to the `release` branch. 
#                Does not commit.

# exit when any command fails
set -e
# Best effort consistent working directory.
# Don't run this from another repo!
cd "$(git rev-parse --show-toplevel)"

TEMP_BRANCH=temp
RELEASE_BRANCH=release
RELEASE_DIR=npm

# Clean temp branch
git branch -D "$TEMP_BRANCH" || echo "ignoring"
# Intentionally use checkout instead of switch to keep main branch files around
git checkout --orphan "$TEMP_BRANCH"
# Unstage main branch files
git reset
# Stage the files we want to keep
git add -f "$RELEASE_DIR" 
# Delete everything else
git clean -fd  
# Unstage the keepers
git reset      
# Promote them out of the npm/ dir 
mv "$RELEASE_DIR"/* .  
rm -r "$RELEASE_DIR"
# Restage them at the root
git add .
git commit -am"temp add"

# Check for remote release branch
if git ls-remote --exit-code --heads origin "$RELEASE_BRANCH"; then 
  # Make sure we have the latest release branch
  git fetch origin "$RELEASE_BRANCH"
  # Check it out locally in case we haven't already
  git switch "$RELEASE_BRANCH" || git switch -c "$RELEASE_BRANCH" origin/"$RELEASE_BRANCH"
  git pull origin "$RELEASE_BRANCH"
fi
# Check for local release branch
if ! git show-ref -q --heads "$RELEASE_BRANCH"; then
  # New branch
  git switch --orphan "$RELEASE_BRANCH"
  git commit --allow-empty -m"Seed $RELEASE_BRANCH branch"
  git commit --allow-empty -m"temp wipe"
else 
  # Wipe the release branch to remove any files that weren't regenerated
  git ls-files -z | xargs -0 rm -f
  git add .
  git commit -am"temp wipe";
fi
# Rebase the clean commit onto this one
git switch "$TEMP_BRANCH"
git rebase -Xtheirs "$RELEASE_BRANCH"
# Get the rebased changed onto the release branch
git switch "$RELEASE_BRANCH" 
git merge "$TEMP_BRANCH" 
# Squash the temp commits into the staging area
git reset --soft HEAD~2
